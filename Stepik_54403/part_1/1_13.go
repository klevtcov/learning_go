package m1_13

import "fmt"

func main() {

	// Решение задач

	// Дано трехзначное число. Найдите сумму его цифр.
	// Формат входных данных
	// На вход дается трехзначное число.
	// Формат выходных данных
	// Выведите одно целое число - сумму цифр введенного числа.
	// var i int
	// fmt.Scan(&i)
	// fmt.Println(i/100 + (i%100)/10 + i%10)

	// кринжовая альтернатива
	// var a,b,c int
	// Scanf("%1d%1d%1d",&a,&b,&c)
	// Print(c+b+a)

	// Дано трехзначное число. Переверните его, а затем выведите.
	// Формат входных данных
	// На вход дается трехзначное число, не оканчивающееся на ноль.
	// Формат выходных данных
	// Выведите перевернутое число.
	// Решение через математику
	// var i, i1, i2, i3 int
	// fmt.Scan(&i)
	// i1 = i / 100
	// i2 = (i % 100) / 10
	// i3 = i % 10
	// fmt.Printf("%d%d%d", i3, i2, i1)

	// математика, отрезаем последнюю цифру и выводим
	// var n int
	// fmt.Scan(&n)
	// for ;n > 0; n /= 10{
	//     fmt.Print(n % 10)
	// }
	// Через строку
	// var n,s string
	// fmt.Scan(&n)
	// for _,e := range n {
	//  s = string(e) + s
	// }

	// Идёт k-я секунда суток. Определите, сколько целых часов h и целых минут m прошло с начала суток. Например, если
	// k=13257=3*3600+40*60+57,
	// то h=3 и m=40.
	// Входные данные
	// На вход программе подается целое число k (0 < k < 86399).
	// Выходные данные
	// Выведите на экран фразу:
	// It is ... hours ... minutes.
	// Вместо многоточий программа должна выводить значения h и m, отделяя их от слов ровно одним пробелом.
	// var k, hours, minutes int
	// fmt.Scan(&k)
	// hours = k / 3600
	// minutes = k % 3600 / 60

	// fmt.Printf("It is %d hours %d minutes.", hours, minutes)

	// fmt.Print("It is ", seconds/3600, " hours ", seconds/60%60, " minutes.")

	// Заданы три числа -
	// a,b,c(a<b<c) - длины сторон треугольника. Нужно проверить, является ли треугольник прямоугольным.
	// Если является, вывести "Прямоугольный". Иначе вывести "Непрямоугольный"
	// Треугольник ABC со сторонами a, b, c (где c — самая длинная сторона),
	// a2 + b2 = c2
	// var a, b, c int
	// fmt.Scan(&a, &b, &c)
	// if a*a+b*b == c*c {
	// 	fmt.Println("Прямоугольный")
	// } else {
	// 	fmt.Println("Непрямоугольный")
	// }

	// Входные данные
	// Даны три натуральных числа a, b, c. Определите, существует ли треугольник с такими сторонами.
	// Выходные данные
	// Если треугольник существует, выведите строку "Существует", иначе выведите строку "Не существует". Строку выводите без кавычек.

	// var a, b, c int
	// fmt.Scan(&a, &b, &c)
	// if a+b > c && a+c > b && b+c > a {
	// 	fmt.Println("Существует")
	// } else {
	// 	fmt.Println("Не существует")
	// }

	// Даны два числа. Найти их среднее арифметическое.
	// Формат входных данных
	// На вход дается два целых положительных числа a и b.
	// Формат выходных данных
	// Программа должна вывести среднее арифметическое чисел a и b (ответ может быть целым числом или дробным)
	// var a, b int
	// fmt.Scan(&a, &b)
	// var c float64
	// c = (float64(a) + float64(b)) / 2
	// fmt.Println(c)

	// альтернатива
	// fmt.Println( float32(a + b) / 2 )

	// Количество нулей
	// По данным числам, определите количество чисел, которые равны нулю.
	// Входные данные
	// Вводится натуральное число N, а затем N чисел.
	// Выходные данные
	// Выведите количество чисел, которые равны нулю.

	// var n int
	// fmt.Scan(&n)
	// count := 0
	// for i:=0; i<n;i++{
	// 	var a int
	// 	fmt.Scan(&a)
	// 	if a == 0 {
	// 		count++
	// 	}
	// }
	// fmt.Println(count)

	// можно сократить код
	// for fmt.Scan(&n); n > 0; n-- {
	//    var a int
	// 	  fmt.Scan(&a)
	// 	  if a == 0 {count++}
	// }

	// Количество минимумов
	// Найдите количество минимальных элементов в последовательности.
	// Входные данные
	// Вводится натуральное число N, а затем N целых чисел последовательности.
	// Выходные данные
	// Выведите количество минимальных элементов последовательности.
	// var n, minimum, count int
	// fmt.Scan(&n)
	// minimum = int(fmt.Sprint(n)[0])
	// count = 1
	// for i := n; i > 0; i-- {
	// 	var a int
	// 	fmt.Scan(&a)
	// 	if a < minimum {
	// 		minimum = a
	// 		count = 0
	// 	}
	// 	if minimum == a {
	// 		count++
	// 	}
	// }
	// fmt.Println(count)

	// Цифровой корень
	// Цифровой корень натурального числа — это цифра, полученная в результате итеративного процесса суммирования цифр,
	// на каждой итерации которого для подсчета суммы цифр берут результат, полученный на предыдущей итерации. Этот
	// процесс повторяется до тех пор, пока не будет получена одна цифра.
	// Например цифровой корень 65536 это 7 , потому что 6+5+5+3+6=25 и 2+5=7 .
	// По данному числу определите его цифровой корень.
	// Входные данные
	// Вводится одно натуральное число n, не превышающее 10^7.
	// Выходные данные
	// Вывести цифровой корень числа n.
	// https://codeforces.com/blog/entry/18286
	// dr(n) = (n - 1) % 9 + 1
	// var n int
	// fmt.Scan(&n)
	// root := (n-1)%9 + 1
	// fmt.Println(root)

	// через циклы
	// var a,num int
	// fmt.Scan(&a)
	// for a>9{
	//     num = a%10
	//     a /= 10
	//     a = a + num
	// }
	// fmt.Print(a)

	fmt.Println("end")
}